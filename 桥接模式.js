/**
 * 特点：桥接模式（Bridge）将抽象部分与它的实现部分分离，使它们都可以独立地变化
 * 
 * 优点：
 * 1、有助于独立地管理各组成部分， 把抽象化与实现化解耦
 * 2、提高可扩充性
 * 
 * 缺点：
 * 1、大量的类将导致开发成本的增加，同时在性能方面可能也会有所减少
 * 
 * 使用场景：
 * 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，
 * 通过桥接模式可以使它们在抽象层建立一个关联关系。
 * 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。
 * 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。
 * 
 * 桥接模式与装饰器模式的区别：
 * 1、装饰器模式关注的是对对象功能的增强，而桥接模式关注的是将对象的行为和对象的结构分离开来，从而可以动态地切换行为。
 * 2、装饰器模式是针对一个已有的类，在其基础上进行功能增强，而桥接模式是针对两个已有的类，将它们组合在一起，形成一个新的类。
 * 
 */


class Color{
    constructor(name){
        this.name = name;
    }
}



class Shape{
    constructor(name,color){
        this.name = name;
        this.color = color;
    }

    draw(){
        console.log(`draw ${this.name} use ${this.color.name}`)
    }
}